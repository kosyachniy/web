version: "3.9"
services:
  db:
    image: mongo:5.0.6
    # ports:
    #   - "27017:27017"
    restart: unless-stopped
    env_file: .env
    environment:
      MONGO_INITDB_DATABASE: admin
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
    volumes:
      - ${PATH_TO_DATA}/db:/data/db
      - ${PATH_TO_DATA}/logs:/data/logs
      # NOTE: To provide files
    #   - type: bind
    #     source: ../docker/db/mongod.conf
    #     target: /etc/mongod.conf
    # command: --config /etc/mongod.conf

  api:
    image: ${PROJECT_NAME}/api
    build:
      dockerfile: ../docker/api/Dockerfile
      context: ../api
      args:
        - PROTOCOL=${PROTOCOL}
        - HOST=${EXTERNAL_HOST}
    depends_on:
      - db
    restart: unless-stopped
    env_file: .env
    volumes:
      - ${PATH_TO_DATA}/load:/data/load
      - ${PATH_TO_DATA}/backup:/backup
      - ../scripts:/scripts
      # NOTE: To provide files
      - type: bind
        source: ${PATH_TO_DATA}/logs/api.err
        target: /app.err
      - type: bind
        source: ${PATH_TO_DATA}/logs/api.log
        target: /app.log
    command: uvicorn app:app --host 0.0.0.0 --port 5000 --proxy-headers

  jobs:
    image: ${PROJECT_NAME}/jobs
    build:
      dockerfile: ../docker/api/Dockerfile
      context: ../api
      args:
        - PROTOCOL=${PROTOCOL}
        - HOST=${EXTERNAL_HOST}
    depends_on:
      - db
    restart: unless-stopped
    env_file: .env
    volumes:
      # NOTE: To provide files
      - type: bind
        source: ${PATH_TO_DATA}/logs/jobs.err
        target: /app.err
      - type: bind
        source: ${PATH_TO_DATA}/logs/jobs.log
        target: /app.log
      - type: bind
        source: ${PATH_TO_DATA}/sitemap.xml
        target: /data/sitemap.xml
    # NOTE: Only if we are running FastAPI
    command: uvicorn jobs:app --host 0.0.0.0 --port 5000 --proxy-headers

  tg:
    image: ${PROJECT_NAME}/tg
    build:
      dockerfile: ../docker/tg/Dockerfile
      context: ../tg
      args:
        - PROTOCOL=${PROTOCOL}
        - HOST=${EXTERNAL_HOST}
    env_file: .env
    volumes:
      - type: bind
        source: ${PATH_TO_DATA}/logs/tg.err
        target: /app.err
      - type: bind
        source: ${PATH_TO_DATA}/logs/tg.log
        target: /app.log
    depends_on:
      - api
    restart: unless-stopped

  web:
    image: ${PROJECT_NAME}/web
    build:
      dockerfile: ../docker/web/Dockerfile.prod
      context: ../web
      args:
        - PROTOCOL=${PROTOCOL}
        - HOST=${EXTERNAL_HOST}
    env_file: .env
    volumes:
      - ${PATH_TO_DATA}/build:/build/

  server:
    image: "nginx:1.21.6"
    restart: unless-stopped
    env_file: .env
    volumes:
      - ../docker/server/nginx.prod.conf:/etc/nginx/nginx.conf.template
      - ${PATH_TO_DATA}/build:/build/
      - ${PATH_TO_DATA}/load:/load
      - ${PATH_TO_DATA}/logs:/data/logs
    depends_on:
      - api
      - jobs
      - web
      - tg
    ports:
      - "${EXTERNAL_PORT}:80"
    command: /bin/sh -c "envsubst '$${EXTERNAL_HOST}'< /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && nginx -g \"daemon off;\""
