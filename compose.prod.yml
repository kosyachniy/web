version: "3.9"
services:
  redis:
    image: redis
    restart: on-failure
    volumes:
      - ${PATH_TO_DATA}/redis:/data
    ports:
      - 6379:6379
    env_file:
      - .env
    command: ["redis-server", "--requirepass", "${REDIS_PASS}"]

  db:
    image: mongo
    ports:
      - 27017:27017
    restart: unless-stopped
    env_file: .env
    environment:
      MONGO_INITDB_DATABASE: admin
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
    volumes:
      - ${PATH_TO_DATA}/db:/data/db
      - ${PATH_TO_DATA}/logs:/data/logs
      # NOTE: To provide files
    #   - type: bind
    #     source: ./configs/mongod.conf
    #     target: /etc/mongod.conf
    # command: --config /etc/mongod.conf

  # prometheus:
  #   image: prom/prometheus
  #   deploy:
  #     mode: global
  #   volumes:
  #     - type: bind
  #       source: ./configs/prometheus.yml
  #       target: /prometheus.yml
  #   command:
  #     - --config.file=/prometheus.yml
  #     - --web.external-url=https://web.kosyachniy.com/prometheus/
  #     - --web.route-prefix=/

  # grafana:
  #   image: grafana/grafana
  #   deploy:
  #     mode: global
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=pass
  #     - GF_SERVER_ROOT_URL=https://web.kosyachniy.com/grafana/
  #   depends_on:
  #     - prometheus

  # cadvisor:
  #   image: google/cadvisor
  #   deploy:
  #     mode: global
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   depends_on:
  #     - api
  #     - prometheus
  #     - grafana

  api:
    image: ${PROJECT_NAME}/api
    build:
      context: ./api
    depends_on:
      - db
      - redis
    restart: unless-stopped
    env_file: .env
    environment:
      WEB: ${PROTOCOL}://${EXTERNAL_HOST}/
    volumes:
      - ${PATH_TO_DATA}/load:/data/load
      - ${PATH_TO_DATA}/backup:/backup
      - ./scripts:/scripts
      # NOTE: To provide files
      - type: bind
        source: ${PATH_TO_DATA}/logs/api.err
        target: /app.err
      - type: bind
        source: ${PATH_TO_DATA}/logs/api.log
        target: /app.log
    command: uvicorn app:app --host 0.0.0.0 --port 5000 --proxy-headers

  jobs:
    image: ${PROJECT_NAME}/jobs
    build:
      context: ./api
    depends_on:
      - db
      - redis
    restart: unless-stopped
    env_file: .env
    environment:
      API: ${PROTOCOL}://${EXTERNAL_HOST}/api/
      WEB: ${PROTOCOL}://${EXTERNAL_HOST}/
    volumes:
      - ${PATH_TO_DATA}/sitemaps:/data/sitemaps
      # NOTE: To provide files
      - type: bind
        source: ${PATH_TO_DATA}/logs/jobs.err
        target: /app.err
      - type: bind
        source: ${PATH_TO_DATA}/logs/jobs.log
        target: /app.log
      - type: bind
        source: ${PATH_TO_DATA}/sitemap.xml
        target: /data/sitemap.xml
    # NOTE: Only if we are running FastAPI
    command: uvicorn jobs:app --host 0.0.0.0 --port 5000 --proxy-headers

  tg:
    image: ${PROJECT_NAME}/tg
    build:
      context: ./tg
    env_file: .env
    environment:
      API: ${PROTOCOL}://${EXTERNAL_HOST}/api/
      WEB: ${PROTOCOL}://${EXTERNAL_HOST}/
    volumes:
      - type: bind
        source: ${PATH_TO_DATA}/logs/tg.err
        target: /app.err
      - type: bind
        source: ${PATH_TO_DATA}/logs/tg.log
        target: /app.log
    depends_on:
      - api
      - redis
    restart: unless-stopped

  web:
    image: ${PROJECT_NAME}/web
    build:
      dockerfile: Dockerfile.prod
      context: ./web
    env_file: .env
    environment:
      REACT_APP_API: ${PROTOCOL}://${EXTERNAL_HOST}/api/
      REACT_APP_WEB: ${PROTOCOL}://${EXTERNAL_HOST}/
    volumes:
      - ${PATH_TO_DATA}/build:/build/
