version: "3.9"
services:
  redis:
    image: redis
    restart: on-failure
    env_file:
      - .env
    environment:
      REDIS_PASS: ${REDIS_PASS}
    volumes:
      - ${DATA_PATH}/redis:/data
    ports:
      - ${REDIS_PORT}:6379
    command: bash -c "redis-server --requirepass ${REDIS_PASS}"

  db:
    image: mongo
    ports:
      - ${DB_PORT}:27017
    restart: unless-stopped
    env_file: .env
    environment:
      MONGO_INITDB_DATABASE: admin
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
    volumes:
      - ${DATA_PATH}/db:/data/db
      - ${DATA_PATH}/logs/mongodb.log:/data/logs/mongodb.log
      - ./configs/mongod.conf:/etc/mongod.conf
    command: --config /etc/mongod.conf

  api:
    image: ${PROJECT_NAME}/api
    build: ./api
    depends_on:
      - db
      - redis
    restart: unless-stopped
    env_file: .env
    environment:
      WEB: ${PROTOCOL}://${EXTERNAL_HOST}/
    volumes:
      - ${DATA_PATH}/load:/data/load
      - ${DATA_PATH}/backup:/backup
      - ./scripts:/scripts
      # For logs
      - ${DATA_PATH}/logs/api.err:/app.err
      - ${DATA_PATH}/logs/api.log:/app.log
      # For monitoring
      - /proc/cpuinfo:/proc/cpuinfo:ro
    ports:
      - ${API_PORT}:5000
    command: uvicorn app:app --host 0.0.0.0 --port 5000 --proxy-headers

  jobs:
    image: ${PROJECT_NAME}/jobs
    build: ./api
    depends_on:
      - db
      - redis
    restart: unless-stopped
    env_file: .env
    environment:
      API: ${PROTOCOL}://${EXTERNAL_HOST}/api/
      WEB: ${PROTOCOL}://${EXTERNAL_HOST}/
    volumes:
      # For logs
      - ${DATA_PATH}/logs/jobs.err:/app.err
      - ${DATA_PATH}/logs/jobs.log:/app.log
      # For sitemap
      - ${DATA_PATH}/sitemaps:/data/sitemaps
      - ${DATA_PATH}/sitemap.xml:/data/sitemap.xml
    command: python job.py

  node_exporter:
    image: quay.io/prometheus/node-exporter
    restart: unless-stopped
    volumes:
      - /:/host:ro,rslave
    command:
      - --path.rootfs=/host

  cadvisor:
    # NOTE: google/cadvisor exit 255
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    command:
      - '--housekeeping_interval=5s'
      - '--docker_only=true'

  prometheus:
    image: prom/prometheus
    ports:
      - ${PROMETHEUS_PORT}:9090
    volumes:
      - ./configs/prometheus.yml:/prometheus.yml
      - ${DATA_PATH}/prometheus:/prometheus
    command:
      - --config.file=/prometheus.yml
      - --web.external-url=${PROTOCOL}://${EXTERNAL_HOST}/prometheus/
      - --web.route-prefix=/
    depends_on:
      - api
      - node_exporter
      - cadvisor

  grafana:
    image: grafana/grafana
    ports:
      - ${GRAFANA_PORT}:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASS}
      - GF_SERVER_ROOT_URL=${PROTOCOL}://${EXTERNAL_HOST}/grafana/
    volumes:
      - ${DATA_PATH}/grafana:/var/lib/grafana
    depends_on:
      - prometheus

  tg:
    image: ${PROJECT_NAME}/tg
    build: ./tg
    env_file: .env
    environment:
      API: ${PROTOCOL}://${EXTERNAL_HOST}/api/
      WEB: ${PROTOCOL}://${EXTERNAL_HOST}/
      TG: ${PROTOCOL}://${EXTERNAL_HOST}/tg/
    volumes:
      # For logs
      - ${DATA_PATH}/logs/tg.err:/app.err
      - ${DATA_PATH}/logs/tg.log:/app.log
    depends_on:
      - api
      - redis
    ports:
      - ${TG_PORT}:80
    restart: unless-stopped

  web:
    image: ${PROJECT_NAME}/web
    build: ./web
    env_file: .env
    environment:
      NEXT_PUBLIC_API: ${PROTOCOL}://${EXTERNAL_HOST}/api/
      NEXT_PUBLIC_WEB: ${PROTOCOL}://${EXTERNAL_HOST}/
      NEXT_PUBLIC_NAME: ${NAME}
      NEXT_PUBLIC_LOCALE: ${LOCALE}
      NEXT_PUBLIC_GOOGLE_ID: ${GOOGLE_ID}
      NEXT_PUBLIC_VK_ID: ${VK_ID}
      NEXT_PUBLIC_AMAZON_ID: ${AMAZON_ID}
      NEXT_PUBLIC_AMAZON_SECRET: ${AMAZON_SECRET}
      NEXT_PUBLIC_AMAZON_BUCKET: ${AMAZON_BUCKET}
      NEXT_PUBLIC_AMAZON_DIR: ${AMAZON_DIR}
      NEXT_PUBLIC_AMAZON_REGION: ${AMAZON_REGION}
      NEXT_PUBLIC_GOOGLE_MAPS_KEY: ${GOOGLE_MAPS_KEY}
      NEXT_PUBLIC_GOOGLE_MAPS_LAT: ${GOOGLE_MAPS_LAT}
      NEXT_PUBLIC_GOOGLE_MAPS_LNG: ${GOOGLE_MAPS_LNG}
      NEXT_PUBLIC_GOOGLE_MAPS_ZOOM: ${GOOGLE_MAPS_ZOOM}
    ports:
      - ${WEB_PORT}:3000
    restart: unless-stopped
    command: bash -c "npm run build && npm start"
